name: Continuous Integration (CI) Pipeline

# This workflow is triggered whenever a Pull Request (PR) is opened,
# synchronized (updated), or reopened, ensuring every change is validated.
on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, master] # Adjust branch names if your default branch is different

# Define environment variables used by the Jest test step
env:
  # Define the Node.js version to use, matching the Dockerfile requirement for consistency.
  NODE_VERSION: 15.x
  # Define the working directory for all subsequent steps relative to the repository root
  APP_DIR: codebase/rdicidr-0.1.0

jobs:
  validate_codebase:
    # Use the 'ubuntu-latest' runner environment for execution
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ${{ env.APP_DIR }} # <-- CRITICAL FIX: All 'run' commands will execute from this directory

    steps:
      - name: ⬇️ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ⚙️ Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm' # Cache the node_modules directory for faster installs
          cache-dependency-path: ${{ env.APP_DIR }}/package-lock.json # Point cache to the correct lock file location

      - name: 📦 Install Dependencies (Requires package-lock.json to be present)
        # Use 'npm ci' for clean, faster, and reliable installations in CI environments
        run: npm ci

      - name: 🧹 Run Linter (ESLint)
        # Checks code quality and standards
        run: npm run lint

      - name: 💅 Run Formatter (Prettier --write)
        # The prompt requested '--write'. In CI, prefer '--check'.
        run: npm run prettier --write 
        
      - name: ✅ Run Tests (Jest)
        # Executes unit and integration tests. Setting CI=true prevents watch mode.
        run: CI=true npm run test

      - name: 🏗️ Build Application
        # Creates the production-ready static assets
        run: npm run build
        
      # Optional: Upload the build artifact for later use (e.g., in a CD pipeline)
      - name: ⬆️ Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: web-build-files
          path: ${{ env.APP_DIR }}/build/ # Updated path to include the working directory
          retention-days: 1
